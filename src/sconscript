import os
import glob
import os.path as osp
from pathlib import Path
import subprocess

Import('env')
Import('with_python')
Import('bin_dir')

env = env.Clone()


def collect_src_files(root_path):
    src_files = []
    root = Path(root_path)
    for item in root.iterdir():
        print(item)
        if item.is_dir() and not 'frontend' in str(item):
            for subitem in item.iterdir():
                if subitem.is_file() and str(subitem).endswith('cc'):
                    src_files.append(str(subitem))
                elif subitem.is_dir():
                    for subsubitem in subitem.iterdir():
                        if subsubitem.is_file() and str(subsubitem).endswith(
                                'cc'):
                            src_files.append(str(subsubitem))
    return src_files


srcs = collect_src_files(os.getcwd())

if env['LIBRARY_TYPE'] == 'static':
    env.StaticLibrary(osp.join(bin_dir, 'lib', 'rdc'), srcs)
else:
    env.SharedLibrary(osp.join(bin_dir, 'lib', 'rdc'), srcs)

if with_python:
    py_ext_suffix = subprocess.check_output(
        ['python-config', '--extension-suffix'])
    py_ext_suffix = py_ext_suffix.decode('utf-8').strip()
    frontend_srcs = Glob(os.path.join(os.getcwd(), 'frontend/*.cc'))
    env.SharedLibrary(
        osp.join(bin_dir, 'lib', 'pyrdc' + py_ext_suffix),
        frontend_srcs,
        LIBS=['rdc'],
        LIBPATH=osp.join(bin_dir, 'lib'),
        SHLIBPREFIX='')
